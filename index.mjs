#!/usr/bin/env node

import { Client } from "ssh2";
import fs from "fs";
import path from "path";
import inquirer from "inquirer";
import readline from "readline";

const PROCESS_DIR = path.join(process.cwd(), "process");
const LOGS_DIR = path.join(process.cwd(), "logs");
const SSH_DATA_FILE = path.join(PROCESS_DIR, "ssh-processes.json");

// Crear directorios si no existen
function ensureDirectories() {
  if (!fs.existsSync(PROCESS_DIR)) {
    fs.mkdirSync(PROCESS_DIR, { recursive: true });
  }
  if (!fs.existsSync(LOGS_DIR)) {
    fs.mkdirSync(LOGS_DIR, { recursive: true });
  }
}

// Cargar procesos SSH guardados
function loadSshProcesses() {
  try {
    ensureDirectories();
    if (fs.existsSync(SSH_DATA_FILE)) {
      const data = fs.readFileSync(SSH_DATA_FILE, "utf8");
      return JSON.parse(data);
    }
  } catch (err) {
    console.error("Error cargando procesos SSH:", err);
  }
  return [];
}

// Guardar procesos SSH
function saveSshProcesses(processes) {
  try {
    ensureDirectories();
    fs.writeFileSync(SSH_DATA_FILE, JSON.stringify(processes, null, 2));
  } catch (err) {
    console.error("Error guardando procesos SSH:", err);
  }
}

// Eliminar proceso SSH por ID
function deleteSshProcess(processId) {
  const processes = loadSshProcesses();
  
  if (processes.length === 0) {
    console.log("üì≠ No hay procesos SSH guardados para eliminar.");
    return false;
  }

  const processIndex = processId - 1;
  
  if (processIndex < 0 || processIndex >= processes.length) {
    console.log("‚ùå ID de proceso inv√°lido. Usa 'list' para ver los procesos disponibles.");
    return false;
  }

  const processToDelete = processes[processIndex];
  console.log(`\nüóëÔ∏è  Eliminando proceso:`);
  console.log(`‚îå‚îÄ Proceso a eliminar ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`);
  console.log(`‚îÇ üìù Nombre: ${processToDelete.name || `Proceso ${processId}`}`);
  console.log(`‚îÇ üåê Host: ${processToDelete.config.host}:${processToDelete.config.port}`);
  console.log(`‚îÇ üë§ Usuario: ${processToDelete.config.username}`);
  console.log(`‚îÇ ‚öôÔ∏è  Comandos: ${processToDelete.commands.length} comando(s)`);
  console.log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`);

  // Eliminar el proceso del array
  processes.splice(processIndex, 1);
  
  // Guardar la lista actualizada
  saveSshProcesses(processes);
  
  console.log(`\n‚úÖ Proceso eliminado exitosamente.`);
  console.log(`üìä Procesos restantes: ${processes.length}`);
  
  return true;
}

// Mostrar lista de procesos SSH agrupados por host
function showSshProcessList() {
  const processes = loadSshProcesses();
  
  if (processes.length === 0) {
    console.log("\nüì≠ No hay procesos SSH guardados.");
    return processes;
  }

  // Agrupar procesos por host
  const groupedByHost = {};
  processes.forEach((proc, originalIndex) => {
    const hostName = proc.config.hostName || 'Sin nombre de host';
    if (!groupedByHost[hostName]) {
      groupedByHost[hostName] = [];
    }
    groupedByHost[hostName].push({
      ...proc,
      originalIndex: originalIndex
    });
  });

  console.log("\nüìã Procesos SSH Guardados (Agrupados por Host)");
  console.log("‚ïê".repeat(55));
  
  const hostEntries = Object.entries(groupedByHost);
  hostEntries.forEach(([hostName, hostProcesses], hostIndex) => {
    const hostId = hostIndex + 1;
    console.log(`üè† HOST ID: ${hostId} | NOMBRE: ${hostName}`);
    console.log(`üìä Total de procesos: ${hostProcesses.length}`);
    
    hostProcesses.forEach((proc, processIndex) => {
      console.log(`\t${processIndex + 1}. ${proc.name || `Proceso ${proc.originalIndex + 1}`}`);
    });
    console.log(""); // L√≠nea en blanco entre hosts
  });
  
  console.log(`üí° Uso: ssh-cli start -h <host_id> -p <posici√≥n> para ejecutar un proceso`);
  console.log(`üìÅ Procesos guardados en: ./process/`);
  console.log(`üìÅ Logs guardados en: ./logs/`);
  
  return { processes, groupedByHost, hostEntries };
}

// Mostrar estad√≠sticas de procesos
function showProcessStatistics() {
  const processes = loadSshProcesses();
  
  if (processes.length === 0) {
    console.log("\nüì≠ No hay procesos SSH guardados.");
    return;
  }

  // Agrupar por host
  const groupedByHost = {};
  let totalCommands = 0;
  
  processes.forEach((proc) => {
    const hostName = proc.config.hostName || 'Sin nombre de host';
    if (!groupedByHost[hostName]) {
      groupedByHost[hostName] = {
        count: 0,
        commands: 0,
        hosts: new Set()
      };
    }
    groupedByHost[hostName].count++;
    groupedByHost[hostName].commands += proc.commands.length;
    groupedByHost[hostName].hosts.add(`${proc.config.host}:${proc.config.port}`);
    totalCommands += proc.commands.length;
  });

  console.log("\nüìä Estad√≠sticas de Procesos SSH");
  console.log("‚ïê".repeat(60));
  console.log(`üìù Total de procesos: ${processes.length}`);
  console.log(`üè† Hosts √∫nicos: ${Object.keys(groupedByHost).length}`);
  console.log(`‚öôÔ∏è  Total de comandos: ${totalCommands}`);
  console.log(`üìä Promedio de comandos por proceso: ${(totalCommands / processes.length).toFixed(1)}`);
  
  console.log("\nüìã Desglose por host:");
  Object.entries(groupedByHost).forEach(([hostName, stats]) => {
    console.log(`  üè† ${hostName}`);
    console.log(`     üìù Procesos: ${stats.count}`);
    console.log(`     ‚öôÔ∏è  Comandos: ${stats.commands}`);
    console.log(`     üåê Servidores: ${Array.from(stats.hosts).join(', ')}`);
  });
}

// Funci√≥n para obtener nombre completo del comando (sin acortar)
function getShortCommandName(cmd) {
  return cmd.trim(); // Retornar el comando completo sin acortar
}

// Funci√≥n mejorada para detectar solicitud de contrase√±a
function detectPasswordPrompt(data) {
  const str = data.toString().toLowerCase();
  
  // Patrones m√°s completos para detectar solicitud de contrase√±a
  const passwordPatterns = [
    /password.*:/i,
    /contrase√±a.*:/i,
    /\[sudo\].*password/i,
    /password for/i,
    /enter.*password/i,
    /sudo.*password/i,
    /authentication.*password/i,
    /password.*required/i,
    /please.*enter.*password/i,
    /\[sudo\]/i,
    /password\?/i,
    /enter.*passphrase/i,
    /passphrase.*for/i,
    /sorry.*try.*again/i
  ];
  
  return passwordPatterns.some(pattern => pattern.test(str));
}

// Funci√≥n mejorada para detectar diferentes tipos de prompts
function analyzeStreamOutput(data, command) {
  const str = data.toString();
  const lowerStr = str.toLowerCase();
  const analysis = {
    isPasswordPrompt: false,
    isSudoPrompt: false,
    isGenericPrompt: false,
    originalData: str,
    confidence: 0
  };
  
  // Detectar prompts de sudo espec√≠ficamente
  if (command.toLowerCase().includes('sudo')) {
    const sudoPatterns = [
      { pattern: /\[sudo\].*password.*for/i, confidence: 95 },
      { pattern: /password.*for.*sudo/i, confidence: 90 },
      { pattern: /sorry.*try.*again/i, confidence: 85 },  // Para intentos fallidos
      { pattern: /\[sudo\]/i, confidence: 80 }
    ];
    
    for (const { pattern, confidence } of sudoPatterns) {
      if (pattern.test(str)) {
        analysis.isSudoPrompt = true;
        analysis.confidence = Math.max(analysis.confidence, confidence);
        break;
      }
    }
  }
  
  // Detectar cualquier tipo de solicitud de contrase√±a con niveles de confianza
  const passwordPatterns = [
    { pattern: /password.*:/i, confidence: 90 },
    { pattern: /contrase√±a.*:/i, confidence: 95 },
    { pattern: /enter.*password/i, confidence: 85 },
    { pattern: /password for/i, confidence: 90 },
    { pattern: /authentication.*password/i, confidence: 80 },
    { pattern: /please.*enter.*password/i, confidence: 85 },
    { pattern: /password\?/i, confidence: 75 }
  ];
  
  for (const { pattern, confidence } of passwordPatterns) {
    if (pattern.test(str)) {
      analysis.isPasswordPrompt = true;
      analysis.confidence = Math.max(analysis.confidence, confidence);
      break;
    }
  }
  
  // Detectar otros tipos de prompts interactivos
  const promptPatterns = [
    /\(y\/n\)/i,
    /yes.*no/i,
    /continue\?/i,
    /press.*enter/i,
    /.*\?\s*$/
  ];
  analysis.isGenericPrompt = promptPatterns.some(pattern => pattern.test(str));
  
  return analysis;
}

// Funci√≥n para detectar patrones espec√≠ficos por comando
function getCommandSpecificPatterns(command) {
  const patterns = {
    sudo: [
      { pattern: /\[sudo\]/i, confidence: 90 },
      { pattern: /password.*for/i, confidence: 85 }
    ],
    ssh: [
      { pattern: /password:/i, confidence: 90 },
      { pattern: /authentication/i, confidence: 70 }
    ],
    su: [
      { pattern: /password:/i, confidence: 90 },
      { pattern: /contrase√±a:/i, confidence: 95 }
    ],
    mysql: [
      { pattern: /enter.*password/i, confidence: 90 }
    ],
    psql: [
      { pattern: /password.*for.*user/i, confidence: 90 }
    ]
  };
  
  for (const [cmd, cmdPatterns] of Object.entries(patterns)) {
    if (command.toLowerCase().includes(cmd)) {
      return cmdPatterns;
    }
  }
  
  // Patrones generales si no se encuentra un comando espec√≠fico
  return [
    { pattern: /password/i, confidence: 70 },
    { pattern: /contrase√±a/i, confidence: 80 }
  ];
}

// Funci√≥n para crear un manejador de timeout para contrase√±as
function createPasswordTimeoutHandler(stream, password, commandName, logStream) {
  let timeoutId;
  let responded = false;
  
  const sendPassword = (reason = "") => {
    if (!responded) {
      console.log(`üîê ${reason}Enviando contrase√±a autom√°ticamente para: ${commandName}`);
      stream.write(password + "\n");
      logStream.write(`[AUTO-RESPONSE] Contrase√±a enviada autom√°ticamente${reason ? ` (${reason})` : ""}\n`);
      responded = true;
    }
  };
  
  // Si despu√©s de 3 segundos no hay respuesta y detectamos un posible prompt
  timeoutId = setTimeout(() => {
    if (!responded) {
      sendPassword("Timeout - ");
    }
  }, 3000);
  
  return {
    triggerPasswordSend: (reason = "") => {
      clearTimeout(timeoutId);
      sendPassword(reason);
    },
    cancel: () => {
      clearTimeout(timeoutId);
      responded = true;
    },
    isResponded: () => responded
  };
}

// Funci√≥n para modo debug interactivo mejorado
async function debugMode(conn, connectionConfig, executionLog, commandList, currentCommandIndex) {
  console.clear();
  
  // Mostrar solo el historial de comandos sin marcos grandes
  if (executionLog.length > 0) {
    console.log("\nüìã HISTORIAL DE COMANDOS:");
    
    executionLog.forEach((logEntry, index) => {
      console.log(`\n${logEntry.status} COMANDO ${index + 1}: ${logEntry.command}`);
      console.log("‚îÄ".repeat(60));
      
      if (logEntry.output && logEntry.output.trim()) {
        const lines = logEntry.output.split('\n').slice(0, 10); // Mostrar m√°ximo 10 l√≠neas
        lines.forEach(line => {
          if (line.trim()) {
            // Truncar l√≠neas muy largas
            const displayLine = line.length > 75 ? line.substring(0, 72) + '...' : line;
            console.log(`  ${displayLine}`);
          }
        });
        
        if (logEntry.output.split('\n').length > 10) {
          console.log(`  ... (${logEntry.output.split('\n').length - 10} l√≠neas m√°s)`);
        }
      } else {
        console.log("  (sin output)");
      }
      
      if (logEntry.exitCode !== undefined) {
        console.log(`  ‚îî‚îÄ C√≥digo de salida: ${logEntry.exitCode}`);
      }
    });
  } else {
    console.log("\nüìã HISTORIAL DE COMANDOS:");
    console.log("   (Sin comandos ejecutados a√∫n)");
  }

  console.log("");
  
  // Configurar readline para capturar atajos de teclado
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    prompt: 'üîß debug@' + (connectionConfig.hostName || connectionConfig.host) + ':~$ '
  });
  
  // Configurar manejo de teclas especiales
  process.stdin.setRawMode(true);
  process.stdin.resume();
  
  let isInRawMode = true;
  let currentInput = '';
  let commandHistory = [];
  let historyIndex = -1;
  
  return new Promise((resolve) => {
    // Funci√≥n para limpiar la l√≠nea actual y redibujar
    function redrawPrompt() {
      // Limpiar l√≠nea actual
      process.stdout.write('\r\x1b[K');
      // Redibujar prompt y input actual
      const prompt = 'üîß debug@' + (connectionConfig.hostName || connectionConfig.host) + ':~$ ';
      process.stdout.write(prompt + currentInput);
    }
    
    // Manejar teclas especiales
    process.stdin.on('data', (key) => {
      if (!isInRawMode) return;
      
      const keyStr = key.toString();
      
      // Ctrl+Q - Salir del debug
      if (keyStr === '\u0011') { // Ctrl+Q
        cleanup();
        resolve("continue_process");
        return;
      }
      
      // Ctrl+X - Finalizar conexi√≥n
      if (keyStr === '\u0018') { // Ctrl+X
        cleanup();
        resolve("terminate_connection");
        return;
      }
      
      // Ctrl+L - Actualizar log
      if (keyStr === '\u000c') { // Ctrl+L
        console.clear();
        // Mostrar solo el historial de comandos
        if (executionLog.length > 0) {
          console.log("\nüìã HISTORIAL DE COMANDOS:");
          
          executionLog.forEach((logEntry, index) => {
            console.log(`\n${logEntry.status} COMANDO ${index + 1}: ${logEntry.command}`);
            console.log("‚îÄ".repeat(60));
            
            if (logEntry.output && logEntry.output.trim()) {
              const lines = logEntry.output.split('\n').slice(0, 10);
              lines.forEach(line => {
                if (line.trim()) {
                  const displayLine = line.length > 75 ? line.substring(0, 72) + '...' : line;
                  console.log(`  ${displayLine}`);
                }
              });
              
              if (logEntry.output.split('\n').length > 10) {
                console.log(`  ... (${logEntry.output.split('\n').length - 10} l√≠neas m√°s)`);
              }
            } else {
              console.log("  (sin output)");
            }
            
            if (logEntry.exitCode !== undefined) {
              console.log(`  ‚îî‚îÄ C√≥digo de salida: ${logEntry.exitCode}`);
            }
          });
        } else {
          console.log("\nüìã HISTORIAL DE COMANDOS:");
          console.log("   (Sin comandos ejecutados a√∫n)");
        }
        showDebugPrompt();
        return;
      }
      
      // Ctrl+H - Mostrar ayuda
      if (keyStr === '\u0008') { // Ctrl+H (Backspace tambi√©n, pero verificamos longitud)
        if (currentInput.length === 0) {
          showDebugHelp();
          return;
        }
        // Si hay texto, actuar como backspace
        handleBackspace();
        return;
      }
      
      // Enter - Ejecutar comando
      if (keyStr === '\r' || keyStr === '\n') {
        if (currentInput.trim()) {
          // Agregar al historial
          commandHistory.unshift(currentInput.trim());
          if (commandHistory.length > 50) commandHistory.pop(); // Limitar historial
          historyIndex = -1;
          
          executeDebugCommand(currentInput.trim());
          currentInput = '';
        } else {
          redrawPrompt();
        }
        return;
      }
      
      // Backspace - Eliminar car√°cter
      if (keyStr === '\u007f') {
        handleBackspace();
        return;
      }
      
      // Flecha arriba - Historial anterior
      if (keyStr === '\u001b[A') {
        navigateHistory('up');
        return;
      }
      
      // Flecha abajo - Historial siguiente  
      if (keyStr === '\u001b[B') {
        navigateHistory('down');
        return;
      }
      
      // Ctrl+C - Mostrar men√∫ de salida
      if (keyStr === '\u0003') { // Ctrl+C
        showExitMenu();
        return;
      }
      
      // Caracteres normales (imprimibles)
      if (keyStr >= ' ' && keyStr <= '~') {
        // Insertar car√°cter
        currentInput += keyStr;
        redrawPrompt();
      }
    });
    
    function handleBackspace() {
      if (currentInput.length > 0) {
        currentInput = currentInput.slice(0, -1);
        redrawPrompt();
      }
    }
    
    function navigateHistory(direction) {
      if (commandHistory.length === 0) return;
      
      if (direction === 'up') {
        if (historyIndex < commandHistory.length - 1) {
          historyIndex++;
          currentInput = commandHistory[historyIndex];
          redrawPrompt();
        }
      } else if (direction === 'down') {
        if (historyIndex > 0) {
          historyIndex--;
          currentInput = commandHistory[historyIndex];
          redrawPrompt();
        } else if (historyIndex === 0) {
          historyIndex = -1;
          currentInput = '';
          redrawPrompt();
        }
      }
    }
    
    function cleanup() {
      if (isInRawMode) {
        process.stdin.setRawMode(false);
        process.stdin.pause();
        isInRawMode = false;
      }
      rl.close();
    }
    
    function showDebugPrompt() {
      console.log("\nüîß Modo debug activo");
      console.log("ÔøΩ Autenticaci√≥n autom√°tica habilitada para comandos sudo");
      console.log("ÔøΩüí° Ctrl+Q=Salir | Ctrl+X=Finalizar | Ctrl+H=Ayuda | ‚Üë‚Üì=Historial");
      const prompt = 'üîß debug@' + (connectionConfig.hostName || connectionConfig.host) + ':~$ ';
      process.stdout.write('\n' + prompt);
      currentInput = '';
    }
    
    function showDebugHelp() {
      console.log("\nüìã Comandos √∫tiles:");
      console.log("  pwd                    - Directorio actual");
      console.log("  ls -la                 - Listar archivos detallado");
      console.log("  ps aux                 - Procesos en ejecuci√≥n");
      console.log("  systemctl status [srv] - Estado de servicios");
      console.log("  journalctl -n 20       - Logs del sistema");
      console.log("  df -h                  - Espacio en disco");
      console.log("  free -h                - Memoria disponible");
      console.log("  netstat -tlnp          - Puertos abiertos");
      console.log("  docker ps              - Contenedores Docker");
      console.log("  sudo [comando]         - Ejecutar con privilegios");
      console.log("\nüîê Autenticaci√≥n autom√°tica:");
      console.log("  ‚Ä¢ Las contrase√±as para sudo se introducen autom√°ticamente");
      console.log("  ‚Ä¢ Detecci√≥n inteligente de prompts de contrase√±a");
      console.log("  ‚Ä¢ Soporte para m√∫ltiples tipos de autenticaci√≥n");
      console.log("\n‚å®Ô∏è  Controles:");
      console.log("  ‚Üë/‚Üì                    - Historial de comandos");
      console.log("  Ctrl+Q                 - Salir del debug");
      console.log("  Ctrl+X                 - Finalizar conexi√≥n");
      console.log("  Ctrl+L                 - Mostrar logs");
      console.log("  Ctrl+H                 - Esta ayuda");
      console.log("");
      redrawPrompt();
    }
    
    async function executeDebugCommand(command) {
      console.log(`\nüîÑ Ejecutando: ${command}`);
      
      await new Promise((cmdResolve) => {
        conn.exec(command, { pty: true }, (err, stream) => {
          if (err) {
            console.error(`‚ùå Error: ${err}`);
            cmdResolve();
            return;
          }
          
          // Crear manejador de contrase√±a para el modo debug
          const passwordHandler = createPasswordTimeoutHandler(
            stream, 
            connectionConfig.password, 
            command, 
            { write: () => {} } // Log stream dummy para debug mode
          );
          
          // Obtener patrones espec√≠ficos para este comando
          const specificPatterns = getCommandSpecificPatterns(command);
          
          stream
            .on("close", (code) => {
              passwordHandler.cancel(); // Cancelar timeout
              
              // Solo mostrar c√≥digo de salida si es diferente de 0
              if (code !== 0) {
                console.log(`\n[Proceso terminado con c√≥digo: ${code}]`);
              }
              
              // Mostrar prompt de nuevo
              redrawPrompt();
              cmdResolve();
            })
            .on("data", (data) => {
              const text = data.toString();
              
              // Analizar si es un prompt de contrase√±a
              if (!passwordHandler.isResponded()) {
                const analysis = analyzeStreamOutput(data, command);
                
                // Manejar solicitudes de contrase√±a con an√°lisis avanzado
                if (analysis.isSudoPrompt || analysis.isPasswordPrompt) {
                  if (analysis.confidence >= 75) {
                    console.log(`\nüîê [DEBUG MODE] Detectado prompt de contrase√±a (confianza: ${analysis.confidence}%)`);
                    passwordHandler.triggerPasswordSend(`Detectado prompt - `);
                    return; // No mostrar el prompt de contrase√±a en pantalla
                  }
                }
                
                // Verificar con patrones espec√≠ficos del comando
                for (const { pattern, confidence } of specificPatterns) {
                  if (pattern.test(text) && confidence >= 70) {
                    console.log(`\nüîê [DEBUG MODE] Detectado patr√≥n espec√≠fico de contrase√±a (${confidence}%)`);
                    passwordHandler.triggerPasswordSend(`Patr√≥n espec√≠fico detectado - `);
                    return; // No mostrar el prompt de contrase√±a en pantalla
                  }
                }
                
                // Detecci√≥n adicional para casos edge
                if (text.includes(':') && 
                    text.trim().endsWith(':') &&
                    text.toLowerCase().includes('password')) {
                  console.log(`\nüîê [DEBUG MODE] Detectado formato t√≠pico de prompt de contrase√±a`);
                  passwordHandler.triggerPasswordSend("Formato t√≠pico de prompt detectado - ");
                  return; // No mostrar el prompt de contrase√±a en pantalla
                }
              }
              
              // Mostrar output en tiempo real como una terminal
              process.stdout.write(text);
            })
            .stderr.on("data", (data) => {
              const text = data.toString();
              
              // Tambi√©n revisar stderr para prompts de contrase√±a
              if (!passwordHandler.isResponded()) {
                const analysis = analyzeStreamOutput(data, command);
                
                if (analysis.isSudoPrompt || analysis.isPasswordPrompt) {
                  if (analysis.confidence >= 75) {
                    console.log(`\nüîê [DEBUG MODE] Detectado prompt en stderr (confianza: ${analysis.confidence}%)`);
                    passwordHandler.triggerPasswordSend(`Detectado prompt en stderr - `);
                    return; // No mostrar el prompt de contrase√±a en pantalla
                  }
                }
                
                // Verificar patrones espec√≠ficos en stderr
                for (const { pattern, confidence } of specificPatterns) {
                  if (pattern.test(text) && confidence >= 70) {
                    console.log(`\nüîê [DEBUG MODE] Detectado patr√≥n espec√≠fico en stderr (${confidence}%)`);
                    passwordHandler.triggerPasswordSend(`Patr√≥n espec√≠fico en stderr - `);
                    return; // No mostrar el prompt de contrase√±a en pantalla
                  }
                }
              }
              
              // Mostrar errores en tiempo real
              process.stdout.write(text);
            });
        });
      });
    }
    
    async function showExitMenu() {
      cleanup();
      
      console.log("\nÔøΩ ¬øQu√© deseas hacer?");
      
      const exitChoice = await inquirer.prompt([
        {
          type: "list",
          name: "action",
          message: "Selecciona una opci√≥n:",
          choices: [
            {
              name: "üîÑ Salir del modo debug (volver al proceso)",
              value: "exit_debug"
            },
            {
              name: "üö™ Finalizar conexi√≥n completamente", 
              value: "terminate"
            },
            {
              name: "‚¨ÖÔ∏è  Volver al modo debug",
              value: "back_to_debug"
            }
          ]
        }
      ]);
      
      if (exitChoice.action === "exit_debug") {
        resolve("continue_process");
      } else if (exitChoice.action === "terminate") {
        resolve("terminate_connection");
      } else {
        // Volver al modo debug
        return debugMode(conn, connectionConfig, executionLog, commandList, currentCommandIndex);
      }
    }
    
    // Mostrar prompt inicial
    showDebugPrompt();
  });
}

// Funci√≥n para obtener autocompletador de comandos debug
// Funci√≥n auxiliar para mostrar el log completo de ejecuci√≥n
function displayFullExecutionLog(executionLog, connectionConfig, commandList, currentCommandIndex) {
  console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  console.log("‚ïë                        üìã LOG COMPLETO DE EJECUCI√ìN                        ‚ïë");
  console.log("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
  console.log(`‚ïë üè† Host: ${(connectionConfig.hostName || 'Sin nombre').padEnd(64)} ‚ïë`);
  console.log(`‚ïë üåê Servidor: ${(connectionConfig.host + ':' + connectionConfig.port).padEnd(58)} ‚ïë`);
  console.log(`‚ïë üë§ Usuario: ${connectionConfig.username.padEnd(62)} ‚ïë`);
  console.log(`‚ïë üìä Progreso: ${(currentCommandIndex + '/' + commandList.length + ' comandos').padEnd(60)} ‚ïë`);
  console.log(`‚ïë ‚ö†Ô∏è  Error en: ${commandList[currentCommandIndex].substring(0, 60).padEnd(60)} ‚ïë`);
  console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  
  if (executionLog.length > 0) {
    console.log("\nüìã HISTORIAL DE COMANDOS:");
    
    executionLog.forEach((logEntry, index) => {
      console.log(`\n${logEntry.status} COMANDO ${index + 1}: ${logEntry.command}`);
      console.log("‚îÄ".repeat(60));
      
      if (logEntry.output && logEntry.output.trim()) {
        const lines = logEntry.output.split('\n').slice(0, 10); // Mostrar m√°ximo 10 l√≠neas
        lines.forEach(line => {
          if (line.trim()) {
            // Truncar l√≠neas muy largas
            const displayLine = line.length > 75 ? line.substring(0, 72) + '...' : line;
            console.log(`  ${displayLine}`);
          }
        });
        
        if (logEntry.output.split('\n').length > 10) {
          console.log(`  ... (${logEntry.output.split('\n').length - 10} l√≠neas m√°s)`);
        }
      } else {
        console.log("  (sin output)");
      }
      
      if (logEntry.exitCode !== undefined) {
        console.log(`  ‚îî‚îÄ C√≥digo de salida: ${logEntry.exitCode}`);
      }
    });
  } else {
    console.log("\nüìã HISTORIAL DE COMANDOS:");
    console.log("   (Sin comandos ejecutados a√∫n)");
  }

}

// Funci√≥n para manejar opciones post-debug
async function postDebugOptions(commandList, currentCommandIndex, processName) {
  console.clear();
  console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë             üîÑ OPCIONES POST-DEBUG                      
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
  
  console.log(`üìù Proceso: ${processName || 'Sin nombre'}`);
  console.log(`üìä Progreso: ${currentCommandIndex}/${commandList.length} comandos`);
  console.log(`‚ö†Ô∏è  Error en comando: ${commandList[currentCommandIndex]}`);
  console.log(`üìã Comandos restantes: ${commandList.length - currentCommandIndex}`);
  
  console.log("\nüìã Comandos restantes por ejecutar:");
  for (let i = currentCommandIndex; i < commandList.length; i++) {
    console.log(`  ${i + 1}. ${commandList[i]}`);
  }
  
  const { action } = await inquirer.prompt([
    {
      type: "list",
      name: "action",
      message: "üîÑ ¬øC√≥mo deseas continuar?",
      choices: [
        {
          name: "üîÑ Reiniciar proceso desde el inicio",
          value: "restart_from_beginning"
        },
        {
          name: "‚ñ∂Ô∏è  Continuar desde el comando que fall√≥",
          value: "continue_from_error"
        },
        {
          name: "‚è≠Ô∏è  Saltar comando fallido y continuar",
          value: "skip_and_continue"
        },
        {
          name: "üö™ Finalizar proceso completamente",
          value: "terminate_process"
        }
      ]
    }
  ]);
  
  return action;
}

// Funci√≥n principal del CLI
async function runSshProcess(processConfig = null) {
  let connectionConfig;
  let commandList;
  let processName = null;

  if (processConfig) {
    // Limpiar pantalla al ejecutar proceso guardado
    console.clear();
    
    // Usar configuraci√≥n existente pero pedir contrase√±a de nuevo
    console.log(`üîÑ Ejecutando proceso guardado: ${processConfig.name || "Sin nombre"}`);
    
    const { password } = await inquirer.prompt([
      {
        type: "password",
        name: "password",
        message: `Contrase√±a para ${processConfig.config.username}@${processConfig.config.host}:`,
        mask: "*",
      },
    ]);
    
    connectionConfig = { ...processConfig.config, password };
    commandList = processConfig.commands;
    processName = processConfig.name;
  } else {
    // Limpiar pantalla al crear nuevo proceso
    console.clear();
    
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë                üöÄ CREAR NUEVO PROCESO SSH               
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
    
    // Primero solicitar el host remoto
    const { host } = await inquirer.prompt([
      { 
        type: "input", 
        name: "host", 
        message: "ÔøΩ Host remoto:",
        validate: (input) => {
          if (!input.trim()) return "El host es obligatorio";
          // Validaci√≥n b√°sica de formato de host/IP
          const hostRegex = /^[a-zA-Z0-9.-]+$/;
          if (!hostRegex.test(input.trim())) {
            return "Formato de host inv√°lido. Usa solo letras, n√∫meros, puntos y guiones.";
          }
          return true;
        }
      }
    ]);

    // Verificar si el host ya existe en procesos guardados
    const existingProcesses = loadSshProcesses();
    const existingHost = existingProcesses.find(proc => proc.config.host === host.trim());
    
    let hostName;
    if (existingHost) {
      // Host ya existe, usar el nombre existente
      hostName = existingHost.config.hostName;
      console.log(`\n‚úÖ Host encontrado: ${hostName} (${host.trim()})`);
      console.log(`üìä Procesos existentes para este host: ${existingProcesses.filter(p => p.config.host === host.trim()).length}`);
    } else {
      // Host nuevo, solicitar nombre
      console.log(`\nüÜï Host nuevo detectado: ${host.trim()}`);
      const hostNameInput = await inquirer.prompt([
        { 
          type: "input", 
          name: "hostName", 
          message: "ÔøΩÔ∏è  Nombre del Host:", 
          validate: (input) => {
            if (!input.trim()) return "El nombre del host es obligatorio";
            if (input.trim().length < 3) return "El nombre debe tener al menos 3 caracteres";
            return true;
          },
          transformer: (input) => input.trim()
        }
      ]);
      hostName = hostNameInput.hostName.trim();
    }

    connectionConfig = await inquirer.prompt([
      { 
        type: "input", 
        name: "port", 
        message: existingHost ? 
          `üîå Puerto SSH (actual: ${existingHost.config.port}):` : 
          "üîå Puerto SSH:",
        default: existingHost ? existingHost.config.port : "22",
        validate: (input) => {
          const port = parseInt(input);
          if (isNaN(port) || port < 1 || port > 65535) {
            return "Puerto inv√°lido. Debe ser un n√∫mero entre 1 y 65535.";
          }
          return true;
        }
      },
      { 
        type: "input", 
        name: "username", 
        message: existingHost ? 
          `üë§ Usuario SSH (actual: ${existingHost.config.username}):` : 
          "üë§ Usuario SSH:",
        default: existingHost ? existingHost.config.username : undefined,
        validate: (input) => input.trim() ? true : "El usuario es obligatorio"
      },
      {
        type: "password",
        name: "password",
        message: "üîê Contrase√±a:",
        mask: "*",
        validate: (input) => input.trim() ? true : "La contrase√±a es obligatoria"
      },
    ]);

    // Agregar el host y hostName a la configuraci√≥n
    connectionConfig.host = host.trim();
    connectionConfig.hostName = hostName;

    commandList = [];
    let addMore = true;

    // Limpiar pantalla para la secci√≥n de comandos
    console.clear();
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               üìã CONFIGURAR COMANDOS SSH                
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
    
    console.log(`üè† Host: ${hostName}`);
    console.log(`üåê Servidor: ${connectionConfig.host}:${connectionConfig.port}`);
    console.log(`üë§ Usuario: ${connectionConfig.username}`);
    if (existingHost) {
      const existingCount = existingProcesses.filter(p => p.config.host === connectionConfig.host).length;
      console.log(`üìä Procesos existentes: ${existingCount}`);
    }
    console.log("\nüìã Agrega comandos a ejecutar:");
    console.log("‚îÄ".repeat(60));

    while (addMore) {
      const { cmd } = await inquirer.prompt([
        { 
          type: "input", 
          name: "cmd", 
          message: `‚öôÔ∏è  Comando ${commandList.length + 1}:`,
          validate: (input) => {
            if (!input.trim()) return "El comando no puede estar vac√≠o";
            return true;
          }
        },
      ]);

      commandList.push(cmd.trim());

      const { again } = await inquirer.prompt([
        {
          type: "confirm",
          name: "again",
          message: "‚ûï ¬øQuieres agregar otro comando?",
          default: false,
        },
      ]);

      addMore = again;
      
      // Si a√∫n hay m√°s comandos por agregar, actualizar la pantalla
      if (again) {
        console.clear();
        console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               üìã CONFIGURAR COMANDOS SSH                
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
        
        console.log(`üè† Host: ${hostName}`);
        console.log(`üåê Servidor: ${connectionConfig.host}:${connectionConfig.port}`);
        console.log(`üë§ Usuario: ${connectionConfig.username}`);
        if (existingHost) {
          const existingCount = existingProcesses.filter(p => p.config.host === connectionConfig.host).length;
          console.log(`üìä Procesos existentes: ${existingCount}`);
        }
        console.log("\nüìã Comandos agregados hasta ahora:");
        commandList.forEach((c, i) => {
          console.log(`  ‚úÖ ${i + 1}. ${c}`);
        });
        console.log("‚îÄ".repeat(60));
      }
    }

    // Limpiar pantalla para la secci√≥n de guardado
    console.clear();
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               üíæ GUARDAR PROCESO SSH                    
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
    
    console.log(`üè† Host: ${hostName}`);
    console.log(`üåê Servidor: ${connectionConfig.host}:${connectionConfig.port}`);
    console.log(`üë§ Usuario: ${connectionConfig.username}`);
    console.log(`üìã Comandos configurados: ${commandList.length}`);
    if (existingHost) {
      const existingCount = existingProcesses.filter(p => p.config.host === connectionConfig.host).length;
      console.log(`üìä Procesos existentes en este host: ${existingCount}`);
    }
    
    commandList.forEach((c, i) => {
      console.log(`  ${i + 1}. ${c}`);
    });
    console.log("");

    // Preguntar si desea guardar el proceso
    const { saveProcess } = await inquirer.prompt([
      {
        type: "confirm",
        name: "saveProcess",
        message: "¬øDeseas guardar este proceso SSH para uso futuro?",
        default: false,
      },
    ]);

    if (saveProcess) {
      const { name } = await inquirer.prompt([
        {
          type: "input",
          name: "name",
          message: "Nombre para este proceso SSH:",
          validate: (input) => input.trim() ? true : "El nombre no puede estar vac√≠o",
        },
      ]);

      processName = name.trim();
      
      // Guardar el proceso
      const processes = loadSshProcesses();
      const newProcess = {
        id: Date.now(),
        name: processName,
        config: { 
          ...connectionConfig, 
          password: "***", // No guardar la contrase√±a real
          hostName: connectionConfig.hostName // Asegurar que se guarde el nombre del host
        }, 
        commands: [...commandList],
        createdAt: new Date().toISOString(),
      };
      
      processes.push(newProcess);
      saveSshProcesses(processes);
      
      // Calcular estad√≠sticas del host despu√©s de agregar el nuevo proceso
      const hostProcesses = processes.filter(p => p.config.host === connectionConfig.host);
      
      // Mostrar confirmaci√≥n de guardado
      console.clear();
      console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               ‚úÖ PROCESO GUARDADO EXITOSAMENTE              
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
      
      console.log(`üìù Nombre del proceso: ${processName}`);
      console.log(`üè† Host: ${connectionConfig.hostName}`);
      console.log(`üåê Servidor: ${connectionConfig.host}:${connectionConfig.port}`);
      console.log(`üë§ Usuario: ${connectionConfig.username}`);
      console.log(`üìã Comandos guardados: ${commandList.length}`);
      console.log(`üìä Total de procesos en este host: ${hostProcesses.length}`);
      console.log(`üìä Total de procesos guardados: ${processes.length}`);
    }
  }

  // Limpiar pantalla para mostrar resumen antes de ejecutar
  console.clear();
  
  console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               üöÄ RESUMEN DE EJECUCI√ìN                   
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);

  console.log("\nüìã Tareas a ejecutar:");
  commandList.forEach((c, i) => {
    console.log(`  ‚è≥ ${i + 1}. ${c}`); // Mostrar comando completo
  });

  console.log(`\nüîß Configuraci√≥n de conexi√≥n:`);
  console.log(`  üåê Host: ${connectionConfig.host}:${connectionConfig.port}`);
  console.log(`  üë§ Usuario: ${connectionConfig.username}`);
  console.log(`  üè∑Ô∏è  Nombre: ${connectionConfig.hostName || 'Sin nombre'}`);
  
  if (processName) {
    console.log(`  üìù Proceso: ${processName}`);
  }

  const { executeNow } = await inquirer.prompt([
    { 
      type: "confirm", 
      name: "executeNow", 
      message: "üöÄ ¬øEjecutar ahora?", 
      default: true 
    },
  ]);

  if (!executeNow) {
    console.log("‚ùå Proceso cancelado.");
    return;
  }

  const conn = new Client();
  const timestamp = Date.now();
  const logFile = path.join(LOGS_DIR, `ssh-log-${timestamp}.txt`);
  const logStream = fs.createWriteStream(logFile);
  
  const startTime = Date.now();
  let completedTasks = 0;
  let taskStatuses = new Array(commandList.length).fill('‚è≥');
  let executionLog = []; // Para almacenar el log detallado de ejecuci√≥n
  let startCommandIndex = 0; // √çndice desde donde comenzar la ejecuci√≥n

  // Funci√≥n interna para ejecutar comandos
  const executeCommands = async (fromIndex = 0) => {
    return new Promise((resolve) => {
      conn
        .on("ready", async () => {
          console.log(`\n‚úÖ Conectado a ${connectionConfig.host}`);
          console.log(`üìù Ejecutando ${commandList.length} tarea(s)...\n`);
          
          // Agregar comando cd al inicio para ir a la ra√≠z
          const allCommands = ["cd ~", ...commandList];
          
          try {
            // Ejecutar comandos uno por uno manteniendo el contexto del directorio
            let currentDirectory = "~"; // Directorio inicial
            
            for (let i = fromIndex; i < commandList.length; i++) {
              const cmd = commandList[i];
              const commandName = cmd; // Usar comando completo
              
              // Mostrar estado actual
              console.clear();
              console.log(`‚úÖ Conectado a ${connectionConfig.host}`);
              console.log(`üìù Ejecutando ${commandList.length} tarea(s)...\n`);
              
              // Mostrar progreso de todas las tareas
              commandList.forEach((c, idx) => {
                const status = idx < i ? (taskStatuses[idx] || '‚úÖ') : idx === i ? '‚è≥' : '‚è≥';
                console.log(`  ${status} ${idx + 1}. ${c}`); // Mostrar comando completo
              });
              
              console.log(`\nüîÑ Ejecutando: ${commandName}...`); // Comando completo
              
              // Preparar el comando con contexto de directorio
              let fullCommand;
              
              // Si es un comando cd, actualizamos el directorio actual
              if (cmd.trim().startsWith('cd ')) {
                const targetDir = cmd.trim().substring(3).trim();
                // Si el directorio es relativo, construir la ruta completa
                if (targetDir.startsWith('/')) {
                  currentDirectory = targetDir;
                } else if (targetDir === '~' || targetDir === '') {
                  currentDirectory = '~';
                } else {
                  // Directorio relativo - construir desde el directorio actual
                  currentDirectory = currentDirectory === '~' ? `~/${targetDir}` : `${currentDirectory}/${targetDir}`;
                }
                fullCommand = `cd ${currentDirectory} && pwd`; // Verificar que el cambio fue exitoso
              } else {
                // Para cualquier otro comando, ejecutar en el directorio actual
                fullCommand = `cd ${currentDirectory} && ${cmd}`;
              }
              
              const commandResult = await new Promise((cmdResolve) => {
                conn.exec(fullCommand, { pty: true }, (err, stream) => {
                  if (err) {
                    console.error(`‚ùå Error ejecutando ${commandName}:`, err);
                    logStream.write(`ERROR en ${cmd}: ${err}\n`);
                    taskStatuses[i] = '‚ùå';
                    
                    // Agregar al log de ejecuci√≥n
                    executionLog.push({
                      command: cmd,
                      status: '‚ùå',
                      output: `ERROR: ${err}`,
                      exitCode: 1
                    });
                    
                    cmdResolve({ success: false, error: err, commandIndex: i });
                    return;
                  }

                  let output = "";
                  let sudoPrompted = false;
                  
                  // Crear manejador de timeout para este comando
                  const passwordHandler = createPasswordTimeoutHandler(
                    stream, 
                    connectionConfig.password, 
                    commandName, // Usar comando completo
                    logStream
                  );
                  
                  // Obtener patrones espec√≠ficos para este comando
                  const specificPatterns = getCommandSpecificPatterns(cmd);

                  stream
                    .on("close", (code) => {
                      passwordHandler.cancel(); // Cancelar timeout
                      
                      logStream.write(`\n=== COMANDO: ${cmd} ===\n`);
                      logStream.write(`DIRECTORIO ACTUAL: ${currentDirectory}\n`);
                      logStream.write(`COMANDO EJECUTADO: ${fullCommand}\n`);
                      logStream.write(output);
                      logStream.write(`\n=== FIN COMANDO (c√≥digo: ${code}) ===\n\n`);
                      
                      // Agregar al log de ejecuci√≥n
                      const logEntry = {
                        command: cmd,
                        status: code === 0 ? '‚úÖ' : '‚ùå',
                        output: output,
                        exitCode: code
                      };
                      
                      executionLog.push(logEntry);
                      
                      if (code === 0) {
                        taskStatuses[i] = '‚úÖ';
                        completedTasks++;
                        cmdResolve({ success: true, commandIndex: i });
                      } else {
                        taskStatuses[i] = '‚ùå';
                        cmdResolve({ success: false, exitCode: code, commandIndex: i, output });
                      }
                    })
                    .on("data", (data) => {
                      const analysis = analyzeStreamOutput(data, cmd);
                      output += analysis.originalData;
                      
                      // Manejar solicitudes de contrase√±a con an√°lisis avanzado
                      if (!passwordHandler.isResponded()) {
                        // Verificar con an√°lisis general
                        if (analysis.isSudoPrompt || analysis.isPasswordPrompt) {
                          if (analysis.confidence >= 75) {
                            passwordHandler.triggerPasswordSend(`Detectado prompt (confianza: ${analysis.confidence}%) - `);
                          }
                        }
                        
                        // Verificar con patrones espec√≠ficos del comando
                        for (const { pattern, confidence } of specificPatterns) {
                          if (pattern.test(analysis.originalData) && confidence >= 70) {
                            passwordHandler.triggerPasswordSend(`Patr√≥n espec√≠fico detectado (${confidence}%) - `);
                            break;
                          }
                        }
                        
                        // Detecci√≥n adicional para casos edge
                        if (analysis.originalData.includes(':') && 
                            analysis.originalData.trim().endsWith(':') &&
                            analysis.originalData.toLowerCase().includes('password')) {
                          passwordHandler.triggerPasswordSend("Formato t√≠pico de prompt detectado - ");
                        }
                      }
                    })
                    .stderr.on("data", (data) => {
                      const analysis = analyzeStreamOutput(data, cmd);
                      output += `[STDERR] ${analysis.originalData}`;
                      
                      // Tambi√©n revisar stderr para prompts de contrase√±a
                      if (!passwordHandler.isResponded()) {
                        if (analysis.isSudoPrompt || analysis.isPasswordPrompt) {
                          if (analysis.confidence >= 75) {
                            passwordHandler.triggerPasswordSend(`Detectado prompt en stderr (confianza: ${analysis.confidence}%) - `);
                          }
                        }
                        
                        // Verificar patrones espec√≠ficos en stderr
                        for (const { pattern, confidence } of specificPatterns) {
                          if (pattern.test(analysis.originalData) && confidence >= 70) {
                            passwordHandler.triggerPasswordSend(`Patr√≥n espec√≠fico en stderr (${confidence}%) - `);
                            break;
                          }
                        }
                      }
                    });
                });
              });
              
              // Si el comando fall√≥, ofrecer modo debug
              if (!commandResult.success) {
                console.log(`\n‚ö†Ô∏è  Error detectado en el comando: ${cmd}`);
                console.log(`üîß C√≥digo de salida: ${commandResult.exitCode || 'desconocido'}`);
                
                const { debugChoice } = await inquirer.prompt([
                  {
                    type: "list",
                    name: "debugChoice",
                    message: "üîß ¬øC√≥mo deseas proceder?",
                    choices: [
                      {
                        name: "üîß Entrar en modo debug",
                        value: "debug"
                      },
                      {
                        name: "‚è≠Ô∏è  Saltar este comando y continuar",
                        value: "skip"
                      },
                      {
                        name: "üö™ Finalizar proceso",
                        value: "terminate"
                      }
                    ]
                  }
                ]);
                
                if (debugChoice === "debug") {
                  const debugResult = await debugMode(conn, connectionConfig, executionLog, commandList, i);
                  
                  if (debugResult === "terminate_connection") {
                    console.log("\nüö™ Finalizando conexi√≥n...");
                    conn.end();
                    logStream.end();
                    resolve({ terminated: true });
                    return;
                  } else if (debugResult === "continue_process") {
                    // Salir del modo debug y mostrar opciones
                    const postDebugAction = await postDebugOptions(commandList, i, processName);
                    
                    if (postDebugAction === "restart_from_beginning") {
                      console.log("\nüîÑ Reiniciando proceso desde el inicio...");
                      conn.end();
                      setTimeout(() => executeCommands(0), 1000);
                      return;
                    } else if (postDebugAction === "continue_from_error") {
                      console.log("\n‚ñ∂Ô∏è  Continuando desde el comando que fall√≥...");
                      continue; // Continuar el bucle desde el comando actual
                    } else if (postDebugAction === "skip_and_continue") {
                      console.log("\n‚è≠Ô∏è  Saltando comando fallido y continuando...");
                      taskStatuses[i] = '‚è≠Ô∏è';
                      continue; // Saltar al siguiente comando
                    } else if (postDebugAction === "terminate_process") {
                      console.log("\nüö™ Finalizando proceso...");
                      conn.end();
                      logStream.end();
                      resolve({ terminated: true });
                      return;
                    }
                  }
                } else if (debugChoice === "skip") {
                  console.log(`\n‚è≠Ô∏è  Saltando comando: ${cmd}`);
                  taskStatuses[i] = '‚è≠Ô∏è';
                  continue;
                } else if (debugChoice === "terminate") {
                  console.log("\nüö™ Finalizando proceso...");
                  conn.end();
                  logStream.end();
                  resolve({ terminated: true });
                  return;
                }
              }
            }
            
            // Si llegamos aqu√≠, todos los comandos se ejecutaron
            resolve({ success: true });
            
          } catch (error) {
            console.error("‚ùå Error durante la ejecuci√≥n:", error);
            logStream.write(`ERROR GENERAL: ${error}\n`);
            conn.end();
            logStream.end();
            resolve({ error: error });
          }
        })
        .on("error", (err) => {
          console.error("‚ùå Error de conexi√≥n:", err);
          logStream.write(`ERROR DE CONEXI√ìN: ${err}\n`);
          logStream.end();
          resolve({ connectionError: err });
        })
        .connect({
          host: connectionConfig.host,
          port: parseInt(connectionConfig.port, 10) || 22,
          username: connectionConfig.username,
          password: connectionConfig.password,
        });
    });
  };

  // Ejecutar los comandos
  const result = await executeCommands(startCommandIndex);

  // Mostrar resultado final
  console.clear();
  const endTime = Date.now();
  const totalTime = Math.round((endTime - startTime) / 1000);
  
  if (result.terminated) {
    console.log(`üö™ Proceso terminado por el usuario.`);
    console.log(`üìÑ Log guardado en: ${logFile}`);
  } else if (result.error || result.connectionError) {
    console.log(`‚ùå Proceso terminado por error:`);
    console.log(`   ${result.error || result.connectionError}`);
    console.log(`üìÑ Log guardado en: ${logFile}`);
  } else {
    console.log(`üìä Resumen de ejecuci√≥n:`);
    console.log(`‚îÄ`.repeat(50));
    console.log(`üìù Total de tareas: ${commandList.length}`);
    console.log(`‚úÖ Ejecutadas exitosamente: ${completedTasks}`);
    console.log(`‚ùå Fallidas: ${commandList.length - completedTasks}`);
    console.log(`‚è±Ô∏è  Tiempo total: ${totalTime} segundos`);
    console.log(`üìÑ Log guardado en: ${logFile}`);
    
    if (completedTasks === commandList.length) {
      console.log(`\nüéâ ¬°Todas las tareas se completaron exitosamente!`);
    } else {
      console.log(`\n‚ö†Ô∏è  Algunas tareas fallaron. Revisa el log para m√°s detalles.`);
    }
    
    console.log(`\nüìã Detalle de tareas:`);
    commandList.forEach((c, i) => {
      console.log(`  ${taskStatuses[i]} ${i + 1}. ${c}`); // Mostrar comando completo
    });
  }
}

// Mostrar ayuda del CLI
function showHelp() {
  console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                       üìö SSH CLI - AYUDA                     
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                                                          
    ‚ïë  üìã COMANDOS DISPONIBLES:                                
    ‚ïë                                                          
    ‚ïë  üöÄ (sin argumentos)                   Modo interactivo        
    ‚ïë  üÜò help                               Mostrar esta ayuda         
    ‚ïë  üìã list                               Listar procesos por host   
    ‚ïë  üöÄ start                              Crear nuevo proceso SSH    
    ‚ïë  ‚ñ∂Ô∏è  start -p <id>                     Ejecutar por ID (obsoleto)
    ‚ïë  ‚ñ∂Ô∏è  start -h <host_id> -p <posici√≥n>  Ejecutar por host ID/posici√≥n
    ‚ïë  üóëÔ∏è  delete -p <id>                    Eliminar proceso guardado 
    ‚ïë                                                          
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üí° EJEMPLOS DE USO:                                     
    ‚ïë                                                           
    ‚ïë  ssh-cli                              (modo interactivo)
    ‚ïë  ssh-cli start                                            
    ‚ïë  ssh-cli list                                             
    ‚ïë  ssh-cli start -h 1 -p 2              (host ID 1, posici√≥n 2)
    ‚ïë  ssh-cli start -p 1                   (m√©todo obsoleto)            
    ‚ïë  ssh-cli delete -p 2                                      
    ‚ïë                                                           
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üîß CARACTER√çSTICAS NUEVAS:                              
    ‚ïë                                                          
    ‚ïë  ‚Ä¢ üñ±Ô∏è  Modo interactivo con men√∫s navegables             
    ‚ïë  ‚Ä¢ ‚úÖ Validaci√≥n avanzada de inputs                      
    ‚ïë  ‚Ä¢ ÔøΩ Historial de comandos navegable                    
    ‚ïë  ‚Ä¢ üìä Estad√≠sticas detalladas de procesos                
    ‚ïë  ‚Ä¢ üé® Interfaz mejorada con emojis                       
    ‚ïë  ‚Ä¢ üîç Selecci√≥n visual de hosts y procesos               
    ‚ïë                                                          
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üîß CARACTER√çSTICAS T√âCNICAS:                            
    ‚ïë                                                          
    ‚ïë  ‚Ä¢ Gesti√≥n completa de conexiones SSH                    
    ‚ïë  ‚Ä¢ Agrupaci√≥n de procesos por nombre de host             
    ‚ïë  ‚Ä¢ Selecci√≥n por ID de host y posici√≥n                   
    ‚ïë  ‚Ä¢ Detecci√≥n autom√°tica de prompts sudo                  
    ‚ïë  ‚Ä¢ Registro detallado de todas las ejecuciones           
    ‚ïë  ‚Ä¢ Persistencia del contexto de directorio               
    ‚ïë                                                          
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
}

// Men√∫ interactivo principal
async function showInteractiveMenu() {
  while (true) {
    // Limpiar pantalla para modo interactivo
    console.clear();
    
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë              _____ _____ _   _     _____  _     _  
    ‚ïë             |   __|   __| |_| |   |  ___|| |   | | 
    ‚ïë             |___  |___  |  _  |   | |___ | |___| | 
    ‚ïë             |_____|_____|_| |_|   |_____||_____|_| 
    ‚ïë                                                    
    ‚ïë             üöÄ SSH Remote Command Executor v1.0.0  
    ‚ïë                                                    
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    ‚ïë                                                        
    ‚ïë  üìã Gestiona conexiones SSH y ejecuta comandos remotos 
    ‚ïë  üíæ Guarda procesos para reutilizaci√≥n futura          
    ‚ïë  üîê Soporte autom√°tico para comandos sudo              
    ‚ïë  üìä Registro detallado de ejecuciones                  
    ‚ïë                                                        
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);

    const { action } = await inquirer.prompt([
      {
        type: "list",
        name: "action",
        message: "üöÄ ¬øQu√© deseas hacer?",
        choices: [
          {
            name: "üìã Navegar procesos SSH por host",
            value: "list"
          },
          {
            name: "üöÄ Crear nuevo proceso SSH",
            value: "create"
          },
          {
            name: "‚ñ∂Ô∏è  Ejecutar proceso (selecci√≥n r√°pida)",
            value: "execute"
          },
          {
            name: "üóëÔ∏è  Eliminar proceso",
            value: "delete"
          },
          {
            name: "üìä Ver estad√≠sticas",
            value: "stats"
          },
          {
            name: "üÜò Ver ayuda",
            value: "help"
          },
          {
            name: "üö™ Salir",
            value: "exit"
          }
        ],
        pageSize: 10
      }
    ]);

    switch (action) {
      case "list":
        await showInteractiveHostNavigation();
        break;
      
      case "create":
        await runSshProcess();
        await waitForKeyPress();
        break;
      
      case "execute":
        await executeInteractiveProcess();
        await waitForKeyPress();
        break;
      
      case "delete":
        await deleteInteractiveProcess();
        await waitForKeyPress();
        break;
      
      case "stats":
        console.clear();
        showProcessStatistics();
        await waitForKeyPress();
        break;
      
      case "help":
        console.clear();
        showHelp();
        await waitForKeyPress();
        break;
      
      case "exit":
        console.log("\nüëã ¬°Hasta luego!");
        return;
    }
  }
}

// Funci√≥n para pausar y esperar input del usuario
async function waitForKeyPress() {
  console.log("\n" + "‚îÄ".repeat(50));
  await inquirer.prompt([
    {
      type: "input",
      name: "continue",
      message: "Presiona Enter para continuar...",
    }
  ]);
}

// Navegaci√≥n interactiva de hosts y procesos
async function showInteractiveHostNavigation() {
  const processes = loadSshProcesses();
  
  if (processes.length === 0) {
    console.clear();
    console.log("\nüì≠ No hay procesos SSH guardados.");
    console.log("üí° Crea uno nuevo primero usando 'Crear nuevo proceso SSH'.");
    return;
  }

  // Agrupar procesos por host
  const groupedByHost = {};
  processes.forEach((proc, originalIndex) => {
    const hostName = proc.config.hostName || 'Sin nombre de host';
    if (!groupedByHost[hostName]) {
      groupedByHost[hostName] = [];
    }
    groupedByHost[hostName].push({
      ...proc,
      originalIndex: originalIndex
    });
  });

  const hostEntries = Object.entries(groupedByHost);
  
  while (true) {
    // Limpiar pantalla antes de mostrar listado de hosts
    console.clear();
    
    // Mostrar listado simplificado de hosts
    console.log("\nüìã Procesos SSH Guardados (Agrupados por Host)");
    console.log("‚ïê".repeat(55));
    
    hostEntries.forEach(([hostName, hostProcesses], hostIndex) => {
      const hostId = hostIndex + 1;
      console.log(`üè† HOST ID: ${hostId} | NOMBRE: ${hostName}`);
      console.log(`üìä Total de procesos: ${hostProcesses.length}`);
      
      hostProcesses.forEach((proc, processIndex) => {
        console.log(`\t${processIndex + 1}. ${proc.name || `Proceso ${proc.originalIndex + 1}`}`);
      });
      console.log(""); // L√≠nea en blanco entre hosts
    });

    // Crear opciones para el selector de hosts
    const hostChoices = hostEntries.map(([hostName, hostProcesses], index) => ({
      name: `üè† ${hostName} (${hostProcesses.length} proceso${hostProcesses.length !== 1 ? 's' : ''})`,
      value: index
    }));

    // Agregar opci√≥n para salir
    hostChoices.push({
      name: "üö™ Volver al men√∫ principal",
      value: -1
    });

    const { selectedHostIndex } = await inquirer.prompt([
      {
        type: "list",
        name: "selectedHostIndex",
        message: "¬øQu√© host deseas navegar?",
        choices: hostChoices,
        pageSize: 10
      }
    ]);

    if (selectedHostIndex === -1) {
      // Salir al men√∫ principal
      break;
    }

    // Navegar procesos del host seleccionado
    const [hostName, hostProcesses] = hostEntries[selectedHostIndex];
    await navigateHostProcesses(hostName, hostProcesses);
  }
}

// Navegar procesos de un host espec√≠fico
async function navigateHostProcesses(hostName, hostProcesses) {
  while (true) {
    // Limpiar pantalla antes de mostrar procesos del host
    console.clear();
    
    console.log(`\nüè† Host: ${hostName}`);
    console.log(`üìä Procesos disponibles: ${hostProcesses.length}`);
    console.log("‚îÄ".repeat(50));

    // Crear opciones para el selector de procesos
    const processChoices = hostProcesses.map((proc, index) => ({
      name: `üìù ${proc.name || `Proceso ${proc.originalIndex + 1}`} (${proc.commands.length} comando${proc.commands.length !== 1 ? 's' : ''})`,
      value: index,
      short: proc.name || `Proceso ${proc.originalIndex + 1}`
    }));

    // Agregar opci√≥n para volver a la lista de hosts
    processChoices.push({
      name: "‚¨ÖÔ∏è  Volver a la lista de hosts",
      value: -1
    });

    const { selectedProcessIndex } = await inquirer.prompt([
      {
        type: "list",
        name: "selectedProcessIndex",
        message: `üìã Selecciona un proceso de "${hostName}":`,
        choices: processChoices,
        pageSize: 10
      }
    ]);

    if (selectedProcessIndex === -1) {
      // Volver a la lista de hosts
      break;
    }

    // Mostrar detalles del proceso seleccionado
    const selectedProcess = hostProcesses[selectedProcessIndex];
    await showProcessDetails(selectedProcess, hostName);
  }
}

// Mostrar detalles de un proceso espec√≠fico
async function showProcessDetails(process, hostName) {
  // Limpiar pantalla antes de mostrar detalles del proceso
  console.clear();
  
  const dateStr = new Date(process.createdAt).toLocaleDateString('es-ES', {
    day: '2-digit',
    month: '2-digit',
    year: '2-digit'
  }) + ' ' + new Date(process.createdAt).toLocaleTimeString('es-ES', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  });

  console.log(`\nüìä Detalles del Proceso`);
  console.log("‚ïê".repeat(50));
  console.log(`‚îå‚îÄ Informaci√≥n del proceso ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`);
  console.log(`‚îÇ üìù Nombre: ${process.name || 'Sin nombre'}`);
  console.log(`‚îÇ üè† Host: ${hostName}`);
  console.log(`‚îÇ üåê Servidor: ${process.config.host}:${process.config.port}`);
  console.log(`‚îÇ üë§ Usuario: ${process.config.username}`);
  console.log(`‚îÇ üìÖ Creado: ${dateStr}`);
  console.log(`‚îÇ ‚öôÔ∏è  Comandos: ${process.commands.length} comando(s)`);
  console.log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`);
  
  console.log(`\nüìã Lista de comandos:`);
  process.commands.forEach((cmd, i) => {
    console.log(`  ${(i + 1).toString().padStart(2)}. ${cmd}`);
  });

  const { action } = await inquirer.prompt([
    {
      type: "list",
      name: "action",
      message: "¬øQu√© deseas hacer?",
      choices: [
        {
          name: "üöÄ Ejecutar este proceso",
          value: "execute"
        },
        {
          name: "‚¨ÖÔ∏è  Volver a la lista de procesos",
          value: "back"
        }
      ]
    }
  ]);

  if (action === "execute") {
    await runSshProcess(process);
    await waitForKeyPress();
  }
  // Si action === "back", simplemente retorna y vuelve a la lista de procesos
}

// Ejecutar proceso de forma interactiva
async function executeInteractiveProcess() {
  const processes = loadSshProcesses();
  
  // Limpiar pantalla para el modo de ejecuci√≥n interactiva
  console.clear();
  
  if (processes.length === 0) {
    console.log("\nüì≠ No hay procesos SSH guardados.");
    console.log("üí° Crea uno nuevo primero usando 'Crear nuevo proceso SSH'.");
    return;
  }

  // Agrupar procesos por host
  const groupedByHost = {};
  processes.forEach((proc, originalIndex) => {
    const hostName = proc.config.hostName || 'Sin nombre de host';
    if (!groupedByHost[hostName]) {
      groupedByHost[hostName] = [];
    }
    groupedByHost[hostName].push({
      ...proc,
      originalIndex: originalIndex
    });
  });

  const hostEntries = Object.entries(groupedByHost);
  
  // Crear opciones para el selector de hosts
  const hostChoices = hostEntries.map(([hostName, hostProcesses], index) => ({
    name: `üè† ${hostName} (${hostProcesses.length} proceso${hostProcesses.length !== 1 ? 's' : ''})`,
    value: index
  }));

  const { selectedHostIndex } = await inquirer.prompt([
    {
      type: "list",
      name: "selectedHostIndex",
      message: "üè† Selecciona un host:",
      choices: hostChoices,
      pageSize: 10
    }
  ]);

  const [hostName, hostProcesses] = hostEntries[selectedHostIndex];
  
  // Crear opciones para el selector de procesos
  const processChoices = hostProcesses.map((proc, index) => ({
    name: `üìù ${proc.name || `Proceso ${proc.originalIndex + 1}`} (${proc.commands.length} comando${proc.commands.length !== 1 ? 's' : ''})`,
    value: index,
    short: proc.name || `Proceso ${proc.originalIndex + 1}`
  }));

  const { selectedProcessIndex } = await inquirer.prompt([
    {
      type: "list",
      name: "selectedProcessIndex",
      message: `üìã Selecciona un proceso de "${hostName}":`,
      choices: processChoices,
      pageSize: 10
    }
  ]);

  const selectedProcess = hostProcesses[selectedProcessIndex];
  
  // Mostrar informaci√≥n del proceso antes de ejecutar
  console.clear(); // Limpiar antes de mostrar informaci√≥n del proceso
  console.log(`\nüìä Informaci√≥n del proceso:`);
  console.log(`‚îå‚îÄ Proceso seleccionado ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`);
  console.log(`‚îÇ üìù Nombre: ${selectedProcess.name || 'Sin nombre'}`);
  console.log(`‚îÇ üè† Host: ${hostName}`);
  console.log(`‚îÇ üåê Servidor: ${selectedProcess.config.host}:${selectedProcess.config.port}`);
  console.log(`‚îÇ üë§ Usuario: ${selectedProcess.config.username}`);
  console.log(`‚îÇ ‚öôÔ∏è  Comandos: ${selectedProcess.commands.length} comando(s)`);
  console.log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`);
  
  console.log(`\nüìã Comandos a ejecutar:`);
  selectedProcess.commands.forEach((cmd, i) => {
    console.log(`  ${i + 1}. ${cmd}`);
  });

  const { confirmExecution } = await inquirer.prompt([
    {
      type: "confirm",
      name: "confirmExecution",
      message: "¬øDeseas ejecutar este proceso?",
      default: true
    }
  ]);

  if (confirmExecution) {
    await runSshProcess(selectedProcess);
  } else {
    console.log("‚ùå Ejecuci√≥n cancelada.");
  }
}

// Eliminar proceso de forma interactiva
async function deleteInteractiveProcess() {
  const processes = loadSshProcesses();
  
  // Limpiar pantalla para el modo de eliminaci√≥n
  console.clear();
  
  if (processes.length === 0) {
    console.log("\nüì≠ No hay procesos SSH guardados para eliminar.");
    return;
  }

  // Crear opciones para el selector de procesos a eliminar
  const processChoices = processes.map((proc, index) => ({
    name: `üìù ${proc.name || `Proceso ${index + 1}`} - üè† ${proc.config.hostName || 'Sin nombre'} (${proc.config.host})`,
    value: index,
    short: proc.name || `Proceso ${index + 1}`
  }));

  // Agregar opci√≥n para cancelar
  processChoices.push({
    name: "‚ùå Cancelar",
    value: -1
  });

  const { selectedProcessIndex } = await inquirer.prompt([
    {
      type: "list",
      name: "selectedProcessIndex",
      message: "üóëÔ∏è  Selecciona el proceso a eliminar:",
      choices: processChoices,
      pageSize: 10
    }
  ]);

  if (selectedProcessIndex === -1) {
    console.log("‚ùå Operaci√≥n cancelada.");
    return;
  }

  const processToDelete = processes[selectedProcessIndex];
  
  // Mostrar informaci√≥n del proceso antes de eliminar
  console.clear(); // Limpiar antes de mostrar informaci√≥n del proceso a eliminar
  console.log(`\n‚ö†Ô∏è  Est√°s a punto de eliminar:`);
  console.log(`‚îå‚îÄ Proceso a eliminar ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`);
  console.log(`‚îÇ üìù Nombre: ${processToDelete.name || `Proceso ${selectedProcessIndex + 1}`}`);
  console.log(`‚îÇ üè† Host: ${processToDelete.config.hostName || 'Sin nombre'}`);
  console.log(`‚îÇ üåê Servidor: ${processToDelete.config.host}:${processToDelete.config.port}`);
  console.log(`‚îÇ üë§ Usuario: ${processToDelete.config.username}`);
  console.log(`‚îÇ ‚öôÔ∏è  Comandos: ${processToDelete.commands.length} comando(s)`);
  console.log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`);

  const { confirmDeletion } = await inquirer.prompt([
    {
      type: "confirm",
      name: "confirmDeletion",
      message: "‚ö†Ô∏è  ¬øEst√°s seguro de que deseas eliminar este proceso? Esta acci√≥n no se puede deshacer.",
      default: false
    }
  ]);

  if (confirmDeletion) {
    // Eliminar el proceso del array
    processes.splice(selectedProcessIndex, 1);
    
    // Guardar la lista actualizada
    saveSshProcesses(processes);
    
    // Mostrar confirmaci√≥n de eliminaci√≥n
    console.clear();
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               ‚úÖ PROCESO ELIMINADO EXITOSAMENTE             
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
    
    console.log(`üóëÔ∏è  Proceso eliminado: ${processToDelete.name || `Proceso ${selectedProcessIndex + 1}`}`);
    console.log(`üè† Host: ${processToDelete.config.hostName || 'Sin nombre'}`);
    console.log(`üìä Procesos restantes: ${processes.length}`);
  } else {
    console.clear();
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë               ‚ùå ELIMINACI√ìN CANCELADA                      
    ‚ïë                                                    
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
    console.log("El proceso no fue eliminado.");
  }
}

// Funci√≥n principal
async function main() {
  // Limpiar pantalla al inicio solo para el modo CLI
  if (process.argv.length > 2) {
    console.clear();
  }
  
  // Banner profesional del CLI
  console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                    
    ‚ïë              _____ _____ _   _     _____  _     _  
    ‚ïë             |   __|   __| |_| |   |  ___|| |   | | 
    ‚ïë             |___  |___  |  _  |   | |___ | |___| | 
    ‚ïë             |_____|_____|_| |_|   |_____||_____|_| 
    ‚ïë                                                    
    ‚ïë             üöÄ SSH Remote Command Executor v1.0.0  
    ‚ïë                                                    
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    ‚ïë                                                        
    ‚ïë  üìã Gestiona conexiones SSH y ejecuta comandos remotos 
    ‚ïë  üíæ Guarda procesos para reutilizaci√≥n futura          
    ‚ïë  üîê Soporte autom√°tico para comandos sudo              
    ‚ïë  üìä Registro detallado de ejecuciones                  
    ‚ïë                                                        
    ‚ïë  üí° Ejecuta 'ssh-cli help' para ver comandos           
    ‚ïë                                                        
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
  
  const args = process.argv.slice(2);
  const command = args[0];

  // Si no hay argumentos, mostrar men√∫ interactivo
  if (args.length === 0) {
    await showInteractiveMenu();
    return;
  }

  // Procesamiento de comandos por argumentos (mantener compatibilidad)
  if (command === "help") {
    showHelp();
    return;
  }

  if (command === "list") {
    showSshProcessList();
    return;
  }

  if (command === "start") {
    const hostFlag = args.indexOf("-h");
    const processIdFlag = args.indexOf("-p");
    
    if (hostFlag !== -1 && processIdFlag !== -1 && args[hostFlag + 1] && args[processIdFlag + 1]) {
      // Ejecutar proceso espec√≠fico por ID de host y posici√≥n
      const hostId = parseInt(args[hostFlag + 1]);
      const position = parseInt(args[processIdFlag + 1]) - 1;
      const processes = loadSshProcesses();
      
      if (isNaN(hostId) || hostId <= 0) {
        console.log("‚ùå ID de host inv√°lido. Debe ser un n√∫mero mayor a 0.");
        console.log("üí° Usa 'ssh-cli list' para ver los IDs de host disponibles.");
        return;
      }
      
      // Agrupar procesos por host
      const groupedByHost = {};
      processes.forEach((proc, originalIndex) => {
        const procHostName = proc.config.hostName || 'Sin nombre de host';
        if (!groupedByHost[procHostName]) {
          groupedByHost[procHostName] = [];
        }
        groupedByHost[procHostName].push({
          ...proc,
          originalIndex: originalIndex
        });
      });
      
      const hostEntries = Object.entries(groupedByHost);
      const hostIndex = hostId - 1;
      
      if (hostIndex < 0 || hostIndex >= hostEntries.length) {
        console.log(`‚ùå No se encontr√≥ el host con ID "${hostId}".`);
        console.log(`üí° Hay ${hostEntries.length} host(s) disponible(s).`);
        console.log("üí° Usa 'ssh-cli list' para ver los IDs de host disponibles.");
        return;
      }
      
      const [hostName, hostProcesses] = hostEntries[hostIndex];
      
      if (position < 0 || position >= hostProcesses.length) {
        console.log(`‚ùå Posici√≥n inv√°lida para el host ID "${hostId}" (${hostName}).`);
        console.log(`üí° El host "${hostName}" tiene ${hostProcesses.length} proceso(s).`);
        console.log("üí° Usa 'ssh-cli list' para ver las posiciones disponibles.");
        return;
      }
      
      const selectedProcess = hostProcesses[position];
      console.log(`üéØ Ejecutando proceso en posici√≥n ${position + 1} del host ID ${hostId} (${hostName})`);
      await runSshProcess(selectedProcess);
      
    } else if (processIdFlag !== -1 && args[processIdFlag + 1]) {
      // Mantener compatibilidad con el m√©todo anterior (por ID global)
      const processIndex = parseInt(args[processIdFlag + 1]) - 1;
      const processes = loadSshProcesses();
      
      if (processIndex >= 0 && processIndex < processes.length) {
        const selectedProcess = processes[processIndex];
        console.log("‚ö†Ô∏è  Usando m√©todo de selecci√≥n por ID global (obsoleto).");
        console.log("üí° Considera usar: ssh-cli start -h <host_id> -p <posici√≥n>");
        await runSshProcess(selectedProcess);
      } else {
        console.log("‚ùå N√∫mero de proceso inv√°lido. Usa 'list' para ver los procesos disponibles.");
      }
    } else {
      // Iniciar nuevo proceso
      await runSshProcess();
    }
    return;
  }

  if (command === "delete") {
    const processIdFlag = args.indexOf("-p");
    
    if (processIdFlag !== -1 && args[processIdFlag + 1]) {
      // Eliminar proceso espec√≠fico
      const processId = parseInt(args[processIdFlag + 1]);
      
      if (isNaN(processId) || processId <= 0) {
        console.log("‚ùå ID de proceso inv√°lido. Debe ser un n√∫mero mayor a 0.");
        return;
      }
      
      deleteSshProcess(processId);
    } else {
      console.log("‚ùå Debes especificar el ID del proceso a eliminar.");
      console.log("üí° Uso: ssh-cli delete -p <ID>");
      console.log("   Ejemplo: ssh-cli delete -p 2");
      console.log("   Usa 'ssh-cli list' para ver los procesos disponibles.");
    }
    return;
  }

  // Si el comando no es reconocido, mostrar men√∫ interactivo
  console.clear();
  console.log(`‚ö†Ô∏è  Comando '${command}' no reconocido.`);
  console.log(`üí° Iniciando modo interactivo...\n`);
  await showInteractiveMenu();
}

main().catch((err) => {
  console.error("‚ùå Error:", err);
});
